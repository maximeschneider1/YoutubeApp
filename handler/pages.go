package handler

import (
	"YSS/model"
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
)

type used struct {
	channelID   string
	ChannelName template.HTML
	ChannelURL  string
}

func HandlePageOne(w http.ResponseWriter, r *http.Request) {
	querybuild := fmt.Sprintf("https://www.googleapis.com/youtube/v3/subscriptions?access_token=%v&part=snippet&maxResults=2&mine=true", currentToken)
	response, err := http.Get(querybuild); if err != nil {
		return
	}

	defer response.Body.Close()

	contents, err := ioutil.ReadAll(response.Body)

	var result model.AutoGenerated
	err = json.Unmarshal(contents, &result); if err != nil {
		fmt.Println(err.Error())
	}
	var sub = used{}
	var all []used
	for _, x := range result.Items {
		sub = used{
			ChannelName: template.HTML(x.Snippet.Title),
			channelID:   x.Snippet.ResourceIDs.ChannelID,
			ChannelURL:  fmt.Sprintf( `https://www.youtube.com/channel/%v`, x.Snippet.ResourceIDs.ChannelID),
		}
		all = append(all, sub)
	}
	t, err := template.ParseFiles("page.html")
	if err != nil {
		fmt.Println(err.Error())
	}

	fmt.Fprintf(w, htmlHome)
	t.Execute(w, all[1])
}

func HandlePageTwo(w http.ResponseWriter, r *http.Request) {
	querybuild2 := fmt.Sprintf("https://www.googleapis.com/youtube/v3/subscriptions?access_token=%v&part=snippet&maxResults=2&pageToken=CAIQAA&mine=true", currentToken)
	response2, err := http.Get(querybuild2); if err != nil {
		return
	}
	defer response2.Body.Close()
	contents2, err := ioutil.ReadAll(response2.Body)
	response2.Body.Close()
	fmt.Fprintf(w, htmlHome)
	fmt.Fprintf(w, "\n \n Content 2: %s\n", contents2)
	fmt.Fprintf(w, htmlHome)
}




